// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: comics/comics.proto

package comicsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComicsService_CreateComic_FullMethodName  = "/comics.ComicsService/CreateComic"
	ComicsService_GetComicByID_FullMethodName = "/comics.ComicsService/GetComicByID"
	ComicsService_ListComics_FullMethodName   = "/comics.ComicsService/ListComics"
	ComicsService_UpdateComic_FullMethodName  = "/comics.ComicsService/UpdateComic"
	ComicsService_DeleteComic_FullMethodName  = "/comics.ComicsService/DeleteComic"
)

// ComicsServiceClient is the client API for ComicsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComicsServiceClient interface {
	CreateComic(ctx context.Context, in *CreateComicRequest, opts ...grpc.CallOption) (*CreateComicResponse, error)
	GetComicByID(ctx context.Context, in *GetComicByIDRequest, opts ...grpc.CallOption) (*Comic, error)
	ListComics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ComicList, error)
	UpdateComic(ctx context.Context, in *UpdateComicRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteComic(ctx context.Context, in *DeleteComicRequest, opts ...grpc.CallOption) (*Empty, error)
}

type comicsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComicsServiceClient(cc grpc.ClientConnInterface) ComicsServiceClient {
	return &comicsServiceClient{cc}
}

func (c *comicsServiceClient) CreateComic(ctx context.Context, in *CreateComicRequest, opts ...grpc.CallOption) (*CreateComicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateComicResponse)
	err := c.cc.Invoke(ctx, ComicsService_CreateComic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comicsServiceClient) GetComicByID(ctx context.Context, in *GetComicByIDRequest, opts ...grpc.CallOption) (*Comic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Comic)
	err := c.cc.Invoke(ctx, ComicsService_GetComicByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comicsServiceClient) ListComics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ComicList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComicList)
	err := c.cc.Invoke(ctx, ComicsService_ListComics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comicsServiceClient) UpdateComic(ctx context.Context, in *UpdateComicRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ComicsService_UpdateComic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comicsServiceClient) DeleteComic(ctx context.Context, in *DeleteComicRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ComicsService_DeleteComic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComicsServiceServer is the server API for ComicsService service.
// All implementations must embed UnimplementedComicsServiceServer
// for forward compatibility.
type ComicsServiceServer interface {
	CreateComic(context.Context, *CreateComicRequest) (*CreateComicResponse, error)
	GetComicByID(context.Context, *GetComicByIDRequest) (*Comic, error)
	ListComics(context.Context, *Empty) (*ComicList, error)
	UpdateComic(context.Context, *UpdateComicRequest) (*Empty, error)
	DeleteComic(context.Context, *DeleteComicRequest) (*Empty, error)
	mustEmbedUnimplementedComicsServiceServer()
}

// UnimplementedComicsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComicsServiceServer struct{}

func (UnimplementedComicsServiceServer) CreateComic(context.Context, *CreateComicRequest) (*CreateComicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComic not implemented")
}
func (UnimplementedComicsServiceServer) GetComicByID(context.Context, *GetComicByIDRequest) (*Comic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComicByID not implemented")
}
func (UnimplementedComicsServiceServer) ListComics(context.Context, *Empty) (*ComicList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComics not implemented")
}
func (UnimplementedComicsServiceServer) UpdateComic(context.Context, *UpdateComicRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComic not implemented")
}
func (UnimplementedComicsServiceServer) DeleteComic(context.Context, *DeleteComicRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComic not implemented")
}
func (UnimplementedComicsServiceServer) mustEmbedUnimplementedComicsServiceServer() {}
func (UnimplementedComicsServiceServer) testEmbeddedByValue()                       {}

// UnsafeComicsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComicsServiceServer will
// result in compilation errors.
type UnsafeComicsServiceServer interface {
	mustEmbedUnimplementedComicsServiceServer()
}

func RegisterComicsServiceServer(s grpc.ServiceRegistrar, srv ComicsServiceServer) {
	// If the following call pancis, it indicates UnimplementedComicsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComicsService_ServiceDesc, srv)
}

func _ComicsService_CreateComic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComicsServiceServer).CreateComic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComicsService_CreateComic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComicsServiceServer).CreateComic(ctx, req.(*CreateComicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComicsService_GetComicByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComicByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComicsServiceServer).GetComicByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComicsService_GetComicByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComicsServiceServer).GetComicByID(ctx, req.(*GetComicByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComicsService_ListComics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComicsServiceServer).ListComics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComicsService_ListComics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComicsServiceServer).ListComics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComicsService_UpdateComic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateComicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComicsServiceServer).UpdateComic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComicsService_UpdateComic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComicsServiceServer).UpdateComic(ctx, req.(*UpdateComicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComicsService_DeleteComic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteComicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComicsServiceServer).DeleteComic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComicsService_DeleteComic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComicsServiceServer).DeleteComic(ctx, req.(*DeleteComicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComicsService_ServiceDesc is the grpc.ServiceDesc for ComicsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComicsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comics.ComicsService",
	HandlerType: (*ComicsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComic",
			Handler:    _ComicsService_CreateComic_Handler,
		},
		{
			MethodName: "GetComicByID",
			Handler:    _ComicsService_GetComicByID_Handler,
		},
		{
			MethodName: "ListComics",
			Handler:    _ComicsService_ListComics_Handler,
		},
		{
			MethodName: "UpdateComic",
			Handler:    _ComicsService_UpdateComic_Handler,
		},
		{
			MethodName: "DeleteComic",
			Handler:    _ComicsService_DeleteComic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comics/comics.proto",
}
